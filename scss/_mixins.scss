// Mixin for set button state colors ->

@mixin button_colors($normal_colors, $hover_colors, $active_colors: $hover_colors, $visited_colors: $normal_colors) {
  @include set_colors($normal_colors);

  &:visited {
    @include set_colors($visited_colors);
  }

  &:hover {
    @include set_colors($hover_colors);
  }

  &:active {
    @include set_colors($active_colors);
  }
}

@mixin button_colors_new($colorset) {
  $_temp_normal: #000, #fff, rgba(0, 0, 0, 0);
  $_temp_hover: #000, #fff, rgba(0, 0, 0, 0);

  @if (map-has-key($colorset , 'normal_colors')) {
    @include set_colors(map-get($colorset , 'normal_colors'));
    $_temp_normal: map-get($colorset , 'normal_colors');
  } @else {
    @include set_colors($_temp_normal);
  } 

  &:hover {
    @if (map-has-key($colorset , 'hover_colors')) {
      @include set_colors(map-get($colorset , 'hover_colors'));
      $_temp_hover: map-get($colorset , 'hover_colors');
    } @else {
      @include set_colors($_temp_normal);
      $_temp_hover: $_temp_normal;
    }
  }

  &:visited {
    @if (map-has-key($colorset , 'visited_colors')) {
      @include set_colors(map-get($colorset , 'visited_colors'));
    } @else {
      @include set_colors($_temp_normal);
    }
  }

  &:active {
    @if (map-has-key($colorset , 'active_colors')) {
      @include set_colors(map-get($colorset , 'active_colors'));
    } @else {
      @include set_colors($_temp_hover);
    }
  }
}

@mixin set_colors($colorset) {
  @if type-of($colorset) == list {
    color: nth($colorset, 1);
    background-color: nth($colorset, 2);
    @if (length($colorset) > 2) {
      border-color: nth($colorset, 3);
    }
    @else {
      border-color: nth($colorset, 2);

      & > svg {
        fill: nth($colorset, 1);
      }
    } 
    @if (length($colorset) > 3) {
      & > svg {
        fill: nth($colorset, 4);
      }
    }
    @else {
      & > svg {
        fill: nth($colorset, 1);
      }
    }
  }
}

// Mixin for set button state colors <-
